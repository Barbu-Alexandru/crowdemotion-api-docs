FORMAT: 1A
HOST: https://api.crowdemotion.co.uk

# CloudEmotion API v1.1
Welcome to CloudEmotion by [CrowdEmotion](http://crowdemotion.co.uk), an API that enables developers, academics and businesses to explore
emotional measures across different industries and cultures.
CloudEmotion achieves this by providing access to our machine-learning process for tracking micro-facial expressions and linking them to
emotions.

We look to your creativity and feedback on reshaping user empowerment through data.

The base address of the API is [http://api.crowdemotion.co.uk](http://api.crowdemotion.co.uk).
Almost all endpoints are restricted and a user will require an account to be able to save or
get information through them. See more information in _Authentication_ section.

> _Last Updated: 20160510_

# Group Overview

## Basic Workflow

1. Capture videos of faces using a webcam or equipment of your choice
2. Upload the FaceVideos using CloudEmotion for processing ([facevideo [POST] or [PUT]](/#reference/face-videos/face-video-operations/analyse-face-video))
3. Retrieve the results ([timeseries [GET]](#reference/timeseries/timeseries-operations/get-all-recorded-timeseries-for-a-response))

See below for [advanced workflows](#reference/details).


## Results

### Universal emotions

The API returns timeseries of the six universal emotions (happiness, surprise, anger, disgust, fear and sadness) defined by Dr. Paul Ekman’s
Facial Action Coding System ([FACS](http://en.wikipedia.org/wiki/Facial_Action_Coding_System)).

Check out more about Dr. Ekman on his [website](http://www.paulekman.com/paul-ekman/) or [Wikipedia](http://en.wikipedia.org/wiki/Paul_Ekman).

### Engagement and mood

We also report the timeseries of positive mood, negative mood and engagement for each video processed. These are linear combinations of the positive
(happiness and surprise), negative (anger, disgust, fear and sadness) and all universal emotions respectively.


## Setting up your account

To be able to use CloudEmotion API, just sign up at https://maker.crowdemotion.co.uk/.

Follow us [@CrowdEmotion](https://twitter.com/crowdemotion) on Twitter to get updates.

---

# Group Details

## Sandbox Mode
A sandbox mode is available for free testing.

Just set the `sandbox` parameter equal to `true` in [facevideo [POST]](#reference/face-videos/face-video-operations/analyse-face-video) methods.
The API calls are identical but the results are randomly generated.


## Advanced workflows
Advanced (administrative) workflows are supported in v1.1 of our API.

### Examples

#### Administrative workflow for starting new research

1. Register new Respondents to participate in Research
2. Register Media for presenting to respondents
3. Create new Research
4. Create links to Media
5. Assign Respondents to Research

#### Respondent workflow for participating in Research

1. Register response containing answers to survey questions
2. Register link to FaceVideo

### Simple FaceVideo analysis
A simple way to analyse a FaceVideo without doing several steps, such creating a Research, assigning Respondents and others, is to use the [FaceVideo [POST]](#reference/face-videos/face-video-operations/analyse-face-video) endpoint.
This will automatically create the metadata required to register the FaceVideo and return the Response's id for accessing the results.

To check for analysis completion, just call the [FaceVideo [GET]](#reference/face-videos/face-video-operations/single-face-video-details) endpoint.


## Implementation Status
Currently we have implemented:

* the _basic level_ (API v1.0) i.e. the respondent workflow calls which are described in [FaceVideo group methods](#reference/face-videos)
* the _advanced level_ (API v1.1) all the basic entities that can help store and manage an entire project.

To help our customers, each method or group of methods in this documentation has a label indicating its implementation status.

## Video Formats and Characteristics
Our plan is to reach a point at which we will be able to accept any video format with any attributes
(size, FPS, etc.) but we prefer videos with the following characteristics:

* format: MP4
* encoding: H263/H264
* size (in pixels): min 320x240, best 640x480
* FPS: min 5 - max 50
* bitrate: at least 100Kbps
* audio: not needed (yet)

We also accept FLV files encoded with _Sorenson Spark_ as a convenience for customers
since Flash recording is a very common task accomplished using this old format.

With the advent of HTML5 standards, we accept also WEBM/VP8 encoding.

## Support
Please contact us at support@crowdemotion.co.uk if you have any questions.

## Known Issues

* Usage of `CamelCase` and `snake_case` styles in the attributes names of returned data structures is not always consistent

## Paging, Searching and Sorting
Almost all `GET` calls to entities support paging, searching and sorting through the following parameters:

- paging: `skip` and `limit` define respectively the number of records to skip and the number of records to get
in the call (the default value for `limit` is 30)
- search: can be done in two different ways:
  - by specifying the entity attribute with the desired value as query parameters: `/v1/response?research_id=1`
  - by using the `where` parameter, which accepts a JSON formatted string in which the attributes of the entity can be specified along
  with the desired values and more powerful operation (the full syntax is explained in a separate document):
  `/v1/response?where={"research_id":"4"}`
- `sort` accepts an attribute name as value
- the parameters above can be combined e.g. `/v1/response?where={"research_id":"4"}&skip=1000&limit=1000&sort=media_id`


## Authentication
Each call (aside from the log-in call) requires three headers in the request or
query string parameters: `Authorization`, `x-ce-rest-date` and `nonce`.

They can be calculated, after a successful call to the [/user/login](#reference/account/login/authenticate-using-credentials) endpoint or after having
correctly initialized `UserId` and `Token` variables, like in the `get_user_info()` in this example snippet in
[Python](https://github.com/CrowdEmotion/crowdemotion-api-python/blob/master/CrowdEmotion.py):

```python
class CrowdEmotion:
    def __init__(self):
        self.UserId=None
        self.Token=None
        self.baseURL=None

    def __generate_headers_(self,httpmethod,request_type):
        time =  datetime.datetime.now(tzlocal()).strftime('%Y-%m-%dT%H:%M:%S%z')
        nonce = ''.join(random.choice(string.letters + string.digits) for i in range(21))

        string_to_hash = self.Token+":"+httpmethod[1:]+","+request_type+","+time+","+nonce
        hashed_string=hashlib.sha256(string_to_hash).digest()
        hashed_string=binascii.b2a_base64(hashed_string).rstrip()
        authorization = self.UserId+':'+hashed_string

        headers = {"x-ce-rest-date":time,"nonce":nonce,"Authorization":authorization}

        if request_type != "GET": headers["Content-Type"] = "application/json"

        return headers

    def __request_(self,httpmethod,request_type='GET',request_parameters=[],data=None):
        headers=self.__generate_headers_(httpmethod,request_type)
        parameters = '&'.join([x[0]+'='+str(x[1]) for x in request_parameters])

        prequest=Request(self.baseURL+httpmethod+'?'+parameters,headers=headers,data=data)
        prequest.get_method = lambda: request_type
        response=urlopen(prequest).read()
        return response

    #User info
    def get_user_info(self):
        return self.__request_('/v1/user/' + `self.UserNumId`)
...
```

The results are filtered according to user privileges and some actions are only
permitted when authorised with an administrative account.

Please refer to our client implementations for details.

## Authorization
The API defines a number of roles that have limitations on the operations that can be performed.

A newly created user on the API can execute any operation but to avoid data leaks and data loss, it is
advisable to create a new token with lower authorization level and use it in your implementation.

> _TODO_ List all operations' permissions.

---

# API Clients
Before jumping on your code editor, try our example client implementations available at our Github account: https://github.com/CrowdEmotion

A sandbox mode is available for testing (see [FaceVideo [POST]](#reference/face-videos/face-video-operations/analyse-face-video) endpoint).

Following is a list of client implementations available in several programming languages:

* https://github.com/CrowdEmotion/crowdemotion-api-java – [ZIP file](https://github.com/CrowdEmotion/crowdemotion-api-java/archive/master.zip)
* https://github.com/CrowdEmotion/crowdemotion-api-php – [ZIP file](https://github.com/CrowdEmotion/crowdemotion-api-php/archive/master.zip)
* https://github.com/CrowdEmotion/crowdemotion-api-js – [ZIP file](https://github.com/CrowdEmotion/crowdemotion-api-js/archive/master.zip)
* https://github.com/CrowdEmotion/crowdemotion-api-android – [ZIP file](https://github.com/CrowdEmotion/crowdemotion-api-android/archive/master.zip)
* https://github.com/CrowdEmotion/crowdemotion-api-python – [ZIP file](https://github.com/CrowdEmotion/crowdemotion-api-python/archive/master.zip)

---

# Group Account

## Login [/v1/user/login]
### Authenticate using credentials [POST]
Returned values `userId` and `token` should be stored for subsequent API calls.

+ Request (application/json)

        {"username": "customerAccount", "password": "customerPassword"}

+ Response 200 (application/json)

        {"userId":"092hkj-jkl7-2134-as22-a3d4f5fg", "token": "74da9DABOqgoipxqQDdygw"}


## User information [/v1/user/{user_id}]
+ Parameters
    + user_id (required, integer, `1`) ... User id.

### Get user information [GET]

+ Response 200 (application/json)

        {
          "id": 1,
          "numId": 1,
          "uuid": "e9352fa1-d8db-4f98-90b6-78858556a62b",
          "emailAddress": "johnsmith@example.com",
          "firstName": "John",
          "lastName": "Smith",
          "role": "AUTHENTICATED",
          "username": "johnsmith",
          "group_id": 2,
          "company_id": 1,
          "verified": true,
          "enabled": true
        }

### Edit user information [PUT]

+ Request (application/json)

        {"email": "johnsmith@example.com",
        "firstName": "John",
        "lastName": "Smith",
        "username": "johnsmith"}

+ Response 200 (application/json)

        {"email": "johnsmith@example.com",
        "firstName": "John",
        "lastName": "Smith",
        "username": "johnsmith"}

## User Metadata [/v1/user/{user_id}/metadata]
Any sort of metadata can be associated with any user.

For example, they can be useful when associating additional information to a user that is not included in the model.

+ Parameters
    + user_id: 1 (integer, required) - Unique identifier for a user.

### Find user metadata [GET]

+ Response 200 (application/json)

        {"user_id": "1", "data": {"key1":"value1", "key2":"value2"}}

### Add user metadata [POST]

+ Request (application/json)

        {"data": {"key3":"value3", "key4":"value4"}}

+ Response 200 (text/plain)



# Group Research

## Research Operations [/v1/research/{research_id}]
+ Parameters
    + research_id (required, string, `3`) ... research id

### List all research [GET /v1/research]
Returns all the Research created by the admin user when logged in with an admin account.

+ Response 200 (application/json)

        [{
          "id": 1, "title": "Research 1"
        }, {
          "id": 2, "title": "Research 2"
        }]

### Create new research [POST /v1/research]
New research can only be created with an admin account.

+ Request  (application/json)

        {
            "title": "Research 2",
            "description": "Research 2 description",
            "ready": true,
            "complete": false,
            "archived": false,
            "outgoingUrl": "http://example.com",
            "customData": "{\"recognition\":false,\"randomOrder\":false,\"minimumTime\":\"3\"}"
        }

+ Response 200 (application/json)

        {
            "id": 165,
            "uuid": "36795949-2c4a-4008-ac70-4e542306d68f",
            "key": "f4fdce7ac01c3dbc66d9884588727886dcc43b90",
            "title": "Research 2",
            "description": "Research 2 description",
            "ready": true,
            "complete": false,
            "archived": false,
            "outgoingUrl": "http://example.com",
            "customData": "{\"recognition\":false,\"randomOrder\":false,\"minimumTime\":\"3\"}",
            "owner_id": 51,
            "company_id": 1
        }

### Get Research details [GET]

+ Response 200 (application/json)

        {
            "id": 165,
            "uuid": "36795949-2c4a-4008-ac70-4e542306d68f",
            "key": "f4fdce7ac01c3dbc66d9884588727886dcc43b90",
            "title": "Research 2",
            "description": "Research 2 description",
            "ready": true,
            "complete": false,
            "archived": false,
            "outgoingUrl": "http://example.com",
            "customData": "{\"recognition\":false,\"randomOrder\":false,\"minimumTime\":\"3\"}",
            "owner_id": 51,
            "company_id": 1,
            "stats": {
                "lastUpdated": 1446046371702,
                "media": 0,
                "visited": 0,
                "started": 0,
                "partial": 0,
                "completes": 0,
                "processed": 0,
                "failed": 0,
                "unprocessed": 0
            }
        }

### Edit research details [PUT]
You can only edit research with admin access.

+ Request  (application/json)

        { "complete": true }

+ Response 200 (application/json)

        {
            "id": 165,
            "uuid": "36795949-2c4a-4008-ac70-4e542306d68f",
            "key": "f4fdce7ac01c3dbc66d9884588727886dcc43b90",
            "title": "Research 2",
            "description": "Research 2 description",
            "ready": true,
            "complete": true,
            "archived": false,
            "outgoingUrl": "http://example.com",
            "customData": "{\"recognition\":false,\"randomOrder\":false,\"minimumTime\":\"3\"}",
            "owner_id": 51,
            "company_id": 1,
            "stats": {
                "lastUpdated": 1446046371702,
                "media": 0,
                "visited": 0,
                "started": 0,
                "partial": 0,
                "completes": 0,
                "processed": 0,
                "failed": 0,
                "unprocessed": 0
            }
        }

### Delete research [DELETE]
You can only delete research with admin access.

+ Response 200 (application/json)


# Group Media
We provide a way to store metadata about the stimuli shown to respondents as a
mean to gather information in one place to augment the analysis phase outcomes.

We also provide storage and streaming support for the actual video files as a
courtesy to our customers.

## Media Operations [/v1/media]

### List all registered Media [GET]

+ Response 200 (application/json)

        [
          {
            "id": 58,
            "name": "Motivational!",
            "mediaPath": "https://www.youtube.com/watch?v=hS5CfP8n_js",
            "path": "https://www.youtube.com/watch?v=hS5CfP8n_js",
            "research_id": 56,
            "researchId": 56,
            "timeCreated": "2015-05-05T14:41:10.000Z",
            "lengthMS": 56000,
            "length": 56,
            "videoOrder": 0,
            "tags": [
              {
                "id": 48,
                "duration": null,
                "name": "Animation",
                "t": 0,
                "x": null,
                "y": null,
                "media_id": 58,
                "timeCreated": null,
                "uuid": null,
                "version": 0,
                "created": null,
                "modified": null
              }
            ],
            "isStored": false,
            "isURL": true,
            "isYouTube": true,
            "videodetails": null
          },
          {
            "id": 110,
            "name": "5",
            "mediaPath": "video.mp4",
            "path": "video.mp4",
            "research_id": 22,
            "researchId": 22,
            "timeCreated": "2015-05-23T21:20:43.000Z",
            "lengthMS": 5828,
            "length": 5.828,
            "videoOrder": 0,
            "tags": [
              {
                "id": 95,
                "duration": null,
                "name": "Action",
                "t": 0,
                "x": null,
                "y": null,
                "media_id": 110,
                "timeCreated": null,
                "uuid": null,
                "version": 0,
                "created": null,
                "modified": null
              }
            ],
            "isStored": true,
            "isURL": false,
            "isYouTube": false,
            "videodetails": null
          }
        ]


### Create new media [POST]
You can post JSON or multipart/form-data.

In the first case you can use the `mediaPath` field to specify a URL for the
media, in the second case the `filename` holds the binary data of the media file.

> _TODO_ Add a content field to JSON to let the file be uploaded as base64 encoded binary data.

+ Request  (application/json)

        {
          "name": "Motivational!",
          "mediaPath": "https://www.youtube.com/watch?v=hS5CfP8n_js",
          "research_id": 1,
          "length": 0,
          "videoOrder": 2,
          "tags": [{ "name": "Animation" }],
          "videodetails": null
        }

+ Response 200 (application/json)

        {
          "id": 246,
          "name": "Motivational!",
          "mediaPath": "https://www.youtube.com/watch?v=hS5CfP8n_js",
          "path": "https://www.youtube.com/watch?v=hS5CfP8n_js",
          "research_id": 1,
          "researchId": 1,
          "timeCreated": "2015-10-28T18:14:34.891Z",
          "lengthMS": 56000,
          "length": 56,
          "videoOrder": 2,
          "isStored": false,
          "isURL": true,
          "isYouTube": true,
          "videodetails": {
            "contentDetails": {
              "duration": "PT56S",
              "dimension": "2d",
              "definition": "hd",
              "caption": "false",
              "licensedContent": false
            },
            "status": {
              "uploadStatus": "processed",
              "privacyStatus": "public",
              "license": "youtube",
              "embeddable": true,
              "publicStatsViewable": true
            },
            "statistics": {
              "viewCount": "183357",
              "likeCount": "228",
              "dislikeCount": "36",
              "favoriteCount": "0",
              "commentCount": "9"
            }
          }
        }


### Media details [GET /v1/media/{media_id}{?presignedUrl}]

+ Parameters
    + media_id: `254` (integer, required) - Research content id.
    + presignedUrl: `true` (boolean, optional) - Returns the `presignedUrl` whose value is a signed (protected) URL to hosted video on our premises.
        + Default: `false`

+ Response 200 (application/json)

        {
          "id": 254,
          "name": "test",
          "mediaPath": "video.mp4",
          "path": "video.mp4",
          "research_id": 80,
          "researchId": 80,
          "timeCreated": "2015-10-28T23:31:07.000Z",
          "lengthMS": 5828,
          "length": 5.828,
          "videoOrder": 0,
          "tags": [
            {
              "id": 233,
              "duration": null,
              "name": "Comedy",
              "t": 0,
              "x": null,
              "y": null,
              "media_id": 254,
              "timeCreated": null,
              "uuid": null,
              "version": 0,
              "created": null,
              "modified": null
            }
          ],
          "presignedUrl": "https://examplecdn.com/media/1/ac5b07a4-fc65-4ca6-92c8-089ce9682769.mp4?accessKeyId=XXXXXXXXXX&Expires=1446078684&Signature=YYYYYYYY%3D",
          "isStored": true,
          "isURL": false,
          "isYouTube": false,
          "videodetails": null
        }

### Edit media details [PUT /v1/media/{media_id}]

+ Parameters
    + media_id: `254` (integer, required) - Research content id.

+ Request  (application/json)

        { "name": "test 1" }

+ Response 200 (application/json)

        {
          "id": 254,
          "name": "test 1",
          "mediaPath": "video.mp4",
          "path": "video.mp4",
          "research_id": 80,
          "researchId": 80,
          "timeCreated": "2015-10-28T23:31:07.000Z",
          "lengthMS": null,
          "length": 0,
          "videoOrder": 0,
          "isStored": true,
          "isURL": false,
          "isYouTube": false,
          "videodetails": null
        }

### Delete media [DELETE /v1/media/{media_id}]

+ Parameters
    + media_id: `254` (integer, required) - research content id.

+ Response 200 (application/json)



# Group Respondents
A Respondent represents a user taking a test composed by a Research and one or
more Media; it is linked to one or more Responses.

The Respondent is then linked to as many Responses (and so to a FaceVideo) as
Media, one Response for each Media.

## Respondent operations [/v1/respondent/{respondent_id}]

+ Parameters
    + respondent_id: `1` (required, number) - Respondent id.

### List all Respondents of a Research [GET /v1/respondent{?research_id,skip,limit,where,sort}]
Returns all the Respondents implementing the general rules for
[paging, searching and sorting](#reference/details).

+ Parameters
    + research_id: 56 (required, number) - Search by research id.
    + skip: 1000 (optional, number) - The number of results to skip.
    + limit: 1000 (optional, number) - The maximum number of results to return.
    + where: {"research_id":56} (optional, string) - JSON formatted string condition. Cannot be combined with `research_id` parameter.
    + sort: "research_id" (optional, string) - Attribute used to sort results.

+ Response 200 (application/json)

        [
          {
            "id": 218,
            "timeCreated": "2015-05-05T14:43:10.000Z",
            "name": null,
            "customData": "{}",
            "key": "1ab54cf5a88182e494326d1ee415c50679c877ac",
            "research_id": 56,
            "user_id": 51
          },
          {
            "id": 2223,
            "timeCreated": "2015-05-15T16:40:39.000Z",
            "name": null,
            "customData": "{}",
            "key": "c2f2462bfda3b4733169da9ca99fdf812d0288d8",
            "research_id": 56,
            "user_id": 51
          }
        ]


### Create a Respondent [POST /v1/respondent]

+ Request  (application/json)

        {
            "name": "aname",
            "customData": "{aa:11}",
            "research_id": 56,
        }

+ Response 200 (application/json)

        {
          "id": 6177,
          "timeCreated": "2015-11-09T17:51:14.658Z",
          "name": "name1",
          "customData": "{aa:11}",
          "key": "0a359d0b8d6129ce6c8849620285ecb1e3a9785e",
          "research_id": 56,
          "user_id": 51
        }


### Find a Respondent [GET]

+ Response 200 (application/json)

        {
          "id": 1,
          "timeCreated": "2015-11-09T17:51:14.000Z",
          "name": "name1",
          "customData": "{aa:11}",
          "key": "0a359d0b8d6129ce6c8849620285ecb1e3a9785e",
          "research_id": 56,
          "user_id": 51
        }


### Update a Respondent [PUT]

+ Request  (application/json)

        { "name": "anothername" }


+ Response 200 (application/json)

        {"id": "1",
        "email": "johnsmith@example2.com",
        "firstName": "John",
        "lastLogin": "2014-01-22T13:30:33",
        "lastName": "Smith",
        "modified": "2014-01-23T14:15:14",
        "username": "johnsmith"}

### Delete a Respondent [DELETE]

+ Response 200 (text/plain)

## Respondent Metadata Operations [/v1/respondent/{respondent_id}/metadata]
Any sort of metadata can be associated with each Respondent.

For example, they can be useful when associating a user from one system (e.g. a survey app) to our API.

Respondent Metadata are different from Response Metadata in that the scope is an entire test session.

+ Parameters
    + respondent_id: `218` (required, number) - Respondent id.

### Add Respondent Metadata [POST]

+ Request  (application/json)

        {
          "data": {
            "isTesting": "true",
            "aa": 11
          }
        }

+ Response 200 (application/json)

        {
          "respondentId": 218,
          "data": {
            "aa": 11
            "isTesting": "true"
          }
        }

### Find Respondent Metadata [GET]

+ Response 200 (application/json)

        {
          "respondentId": 218,
          "data": {
            "aa": 11
            "isTesting": "true"
          }
        }



# Group Responses

## Response Operations [/v1/response/{response_id}]
+ Parameters
    + response_id (required, integer, `1`) ... response id.

### Find all Responses [GET /v1/response{?skip,limit,where,sort}]
Returns all the Responses implementing the general rules for
[paging, searching and sorting](#reference/details).

+ Parameters
    + skip: 1000 (optional, number) - The number of results to skip.
    + limit: 1000 (optional, number) - The maximum number of results to return.
    + where: {"research_id":56} (optional, string) - JSON formatted string condition. Cannot be combined with `research_id` parameter.
    + sort: "research_id" (optional, string) - Attribute used to sort results.

+ Response 200 (application/json)

        [
          {
            "id": 59097,
            "research_id": 239,
            "media_id": 363,
            "respondent_id": 25484,
            "user_id": 25484,
            "researchId": 239,
            "mediaId": 363,
            "respondentId": 25484,
            "userId": 25484,
            "complete": false,
            "used": null,
            "company_id": 1
          },
          {
            "id": 59099,
            "research_id": 239,
            "media_id": 363,
            "respondent_id": 25488,
            "user_id": 25488,
            "researchId": 239,
            "mediaId": 363,
            "respondentId": 25488,
            "userId": 25488,
            "complete": false,
            "used": null,
            "company_id": 1
          }
        ]

### Create a Response [POST /v1/response]

+ Request  (application/json)

        {"research_id":1, "media_id":2, "respondent_id": 3}

+ Response 200 (application/json)

        {
          "id": 72575,
          "research_id": 1,
          "media_id": 2,
          "respondent_id": 3,
          "user_id": 3,
          "researchId": 1,
          "mediaId": 2,
          "respondentId": 3,
          "userId": 3,
          "company_id": 1
        }

### Find a Response [GET]

+ Response 200 (application/json)

        {"id": 1, "research_id": 1, "respondent_id": 1, "media_id": 1}

### Update a Response [PUT]

+ Request  (application/json)

        {"research_id":2}

+ Response 200 (application/json)

        {
          "id": 72575,
          "research_id": 2,
          "media_id": 2,
          "respondent_id": 3,
          "user_id": 3,
          "researchId": 2,
          "mediaId": 2,
          "respondentId": 3,
          "userId": 3,
          "company_id": 1
        }

### Delete a Response [DELETE]

+ Response 200 (text/plain)


## Response Metadata Operations [/v1/response/{response_id}/metadata]
Any sort of metadata can be associated with each Response.

For example, they can be useful when associating a user response from one system
(e.g. a survey app) to our API.

Response Metadata is different from Respondent Metadata which scope is
only a single Media inside a complete session.

+ Parameters
    + response_id (required, integer, `1`) ... response id.

### Show Response metadata [GET]
+ Response 200 (application/json)

        {"response_id":"1","data": [{"key1":"value1"},{"key2":"value2"}]}

### Update response metadata [POST]

+ Request  (application/json)

        {"data": [{"key1":"value3"},{"key4":"value4"}}

+ Response 200 (text/plain)



# Group FaceVideos
Use these methods to do an ad-hoc analysis of one FaceVideo.

There are three API methods to upload a video file so there are three elements to pay attention to:
the URL, the HTTP method and the request body.

The choice depends on how to upload the files:
1. through a full URL reachable from the Internet
2. directly including the file binary stream in the request body, respectively using a POST with
multipart-formatted body, or a PUT simply including only the binary stream in the request body.

## FaceVideo Operations [/v1/facevideo{?sandbox,response_id,research_id,media_id,respondent_id,processVideo}]
+ Parameters
    + sandbox (optional, boolean) - Generates random data for testing, at no cost.
        + Default: `false`
    + response_id (optional, number) - Associates this Facevideo to a previously generated Response.
    + research_id (optional, number) - Associates this Facevideo to a previously generated Research.
    + media_id (optional, number) - Associates this Facevideo to a previously generated Media.
    + respondent_id (optional, number) - Associates this Facevideo to a previously generated Respondent.
    + processVideo (optional, boolean) - Actually processes the video.
        + Default: `true`

### Analyse FaceVideo [POST]
Starts the analysis of a single FaceVideo (in the supported formats) through either:

1. a video URL pointing to a resource accessible through the Internet without authentication
2. the binary contents of the video in the request's body, encoded as `multipart/form-data` content type

The third option is a `PUT` call to `/v1/facevideo/{filename}` (`filename` required string e.g. `facevideo1.mp4`)
which supports all the URL parameters as above with an body encoding `application/octet-stream` and
the file contents as plain binary: this call makes uploads more efficient but it does not respect HTTP/RESTful
standards so it may be not supported in future.


+ Request  (application/json)

        {"link": "http://example.com/facevideo1.mp4"}

+ Request  (multipart/form-data; boundary=Boundary_1_206808442_1400796574215)

        --Boundary_1_206808442_1400796574215
        Content-Type: application/octet-stream
        Content-Disposition: form-data; filename="facevideo1.mp4"; modification-date="Fri, 27 Jan 2012 13:32:38 GMT"; size=195261; name="file"

        <...>
        --Boundary_1_206808442_1400796574215--

+ Response 200 (application/json)

        {"id": 1, "responseId": 1, "fileName": "facevideo1.mp4", "status": 0, "numFrames": 0, "md5":"XXX", "frameRate": 1, "celocation": "AAAA"}


### Find a FaceVideo [GET /v1/facevideo/{?facevideo_id,response_id}]
Use this operation to access information about the FaceVideo analysis.

_Any one of the two parameters must be specified._

To discover if the video has been analyzed, check the meaning of `status` field
in the following table:

|Value|Description         |
|-----|--------------------|
| 0   | Not started        |
| 1   | Processing started |
| 2   | Processing complete|
|-1   | Error              |


+ Parameters
    + facevideo_id: 1 (optional, string) - FaceVideo id corresponding to the FaceVideo. *Only this parameter is considered if both are specified.*
    + response_id: 1 (optional, string) - Response id corresponding to the FaceVideo.


+ Response 200 (application/json)
    + Body

            {
              "id": 1,
              "timeCreated": "2014-03-25T15:00:43.000Z",
              "filename": null,
              "fqAvg": null,
              "fqStddev": null,
              "frameRate": -1,
              "numFrames": null,
              "remoteLocation": "http://example.com/facevideo1.mp4",
              "status": 0,
              "statusText": "Not yet started",
              "statusMessage": null,
              "responseId": 11,
              "md5": null,
              "lengthMS": null,
              "lengthS": null,
              "framesProcessed": null
            }


### Delete a FaceVideo [DELETE /v1/facevideo/{facevideo_id}]

+ Response 200 (text/plain)

        "OK"


# Group Metrics

Metrics are linked to timeseries and define their meaning.

Common metric ID are listed below:

| id  | Value              |
|-----|--------------------|
| 1   | Timestamp          |
| 2   | Neutral            |
| 3   | Happiness          |
| 4   | Surprise           |
| 5   | Puzzlement         |
| 6   | Disgust            |
| 7   | Fear               |
| 8   | Sadness            |


## Metrics Operations [/v1/metric/{metric_id}]
+ Parameters
    + metric_id (required, integer, `1`) ... Metric id.

### List all registered metrics [GET /v1/metric]
+ Response 200 (application/json)

        [
          {
            "name": "timestamp",
            "description": "Time relative to start in ms",
            "metricType": 2,
            "id": 1
          },
          {
            "name": "neutral",
            "description": "Neutral",
            "metricType": 0,
            "id": 2
          },
          {
            "name": "happy",
            "description": "Happy",
            "metricType": 0,
            "id": 3
          },
          {
            "name": "surprised",
            "description": "Surprised",
            "metricType": 0,
            "id": 4
          },
          {
            "name": "angry",
            "description": "Angry",
            "metricType": 0,
            "id": 5
          },
          {
            "name": "disgusted",
            "description": "Disgusted",
            "metricType": 0,
            "id": 6
          },
          {
            "name": "afraid",
            "description": "Afraid",
            "metricType": 0,
            "id": 7
          },
          {
            "name": "sad",
            "description": "Sad",
            "metricType": 0,
            "id": 8
          }
        ]


### Create Metric [POST /v1/metric]
+ Request  (application/json)

        {"Name": "Surprise", "description": "Surprise expression"}

+ Response 200 (application/json)

        {"id": 4, "name": "Surprise", "description": "Surprise expression"}

### Find a Metric [GET]

+ Response 200 (application/json)

        {"id": 1, "name": "Happiness", "description": "Happiness expression"}

### Delete a Metric [DELETE]

+ Response 200 (text/plain)



# Group Timeseries
## Timeseries Operations [/v1/timeseries{?response_id,metric_id,normalize,format}]
+ Parameters
    + response_id: 45178 (required, integer) - Response id.
    + metric_id: 1 (optional, integer) - Metric id, can be multiple values separated by comma: `1,3,4`. If not specified, all timeseries will be passed back.
    + normalize: false (optional, boolean) - Return data beetwen 0 and 1.
        + Default: false
    + format: csv (optional, string) - If value is 'csv' then data is passed back in CSV format instead of the default timeseries format.

### Get all recorded timeseries for a Response [GET]

+ Response 200 (application/json)

        [
          {
            "responseId": "45178",
            "metricId": 1,
            "metricName": "timestamp",
            "startIndex": 1,
            "endIndex": 20,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0,
              24,
              34,
              101,
              148,
              225,
              238,
              307,
              366,
              400,
              471,
              517,
              562,
              599,
              671,
              727,
              754,
              847,
              860
            ]
          },
          {
            "responseId": "45178",
            "metricId": 2,
            "metricName": "neutral",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0.7607221621533021,
              0.776591407118935,
              0.8298961308231209,
              0.8222747534137409,
              0.8204662063859757,
              0.816069217468363,
              0.8744675556119674,
              0.8816765265095694,
              0.9095194823200278,
              0.8519094447763252,
              0.9920775133011608,
              0.9327442732364933,
              0.9351464754977733,
              0.9110579950203359,
              0.8081499617249982,
              0.832906961038407,
              0.8042142376702405,
              0.9388513044417968,
              0.9427857151000202,
              0.8966269192597887
            ]
          },
          {
            "responseId": "45178",
            "metricId": 3,
            "metricName": "happy",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0.22453100290646086,
              0.13174509904445683,
              0.11186127860616064,
              0.05058898226546208,
              0.07082773008167263,
              0.06462044460569562,
              0.05396867963071775,
              0.06177313830731203,
              0.09064450868191798,
              0.030551359963403014,
              0.02679307339503816,
              0.03549668142901664,
              0.034952459449547155,
              0,
              0.011972883548327283,
              0.04998166208547434,
              0.07709022648310343,
              0.07310320893786003,
              0.13430451980297586,
              0.1176939185165614
            ]
          },
          {
            "responseId": "45178",
            "metricId": 4,
            "metricName": "surprised",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              1,
              0.9020874872343531,
              0.8724924621893694,
              0.9411068018609478,
              0.883923795166075,
              0.8277975003647329,
              0.8772198041790271,
              0.8754498370860284,
              0.7954517823274815,
              0.8546104248731541,
              0.9139585258311855,
              0.8530694289095301,
              0.9092929857835271,
              0.9315214219715022,
              0.9470306699735772,
              0.7161325357843377,
              0.6700951547277474,
              0.5832279660879574,
              0.4898665078052814,
              0.5224493021446287
            ]
          },
          {
            "responseId": "45178",
            "metricId": 5,
            "metricName": "angry",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0.5480039590894095,
              0.6310218141352913,
              0.7105055667704903,
              0.8111883419355922,
              0.7559847675712552,
              0.7307763282241694,
              0.7780113963618875,
              0.7384876054778587,
              0.7027383701748598,
              0.7447058363017185,
              0.84206141062132,
              0.7772508933114874,
              0.7083303043689784,
              0.6648865676148724,
              0.6270459489232731,
              0.5161634857880992,
              0.5678721012811122,
              0.5299643793791835,
              0.30646036157446493,
              0.5253957691425889
            ]
          },
          {
            "responseId": "45178",
            "metricId": 6,
            "metricName": "disgusted",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0.8131780040393946,
              0.7145616007662356,
              0.6955046119890895,
              0.7164771899140068,
              0.764757324005247,
              0.7502238324275928,
              0.7543204863930706,
              0.7655069023674184,
              0.8269983550919275,
              0.8050679825931247,
              0.9876579840506382,
              0.9386959418660338,
              0.9655818602036356,
              1,
              0.9553896766402232,
              0.9022320777895767,
              0.8632435921460845,
              0.8346555062777189,
              0.7756938805255378,
              0.8132248526870302
            ]
          },
          {
            "responseId": "45178",
            "metricId": 7,
            "metricName": "afraid",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0.3068328088395714,
              0.5010357058605911,
              0.44260395188414026,
              0.5219384930572084,
              0.4841905107705493,
              0.5466233877951894,
              0.5108982643944644,
              0.5229021612872412,
              0.5428441828689765,
              0.5440434906744253,
              0.33688543061351256,
              0.4483959884803121,
              0.463201964489934,
              0.506643294457641,
              0.46211216443789804,
              0.6274332490871276,
              0.4423743814131303,
              0.5640937006390503,
              0.6932819763959336,
              0.7572757874926841
            ]
          },
          {
            "responseId": "45178",
            "metricId": 8,
            "metricName": "sad",
            "startIndex": 1,
            "endIndex": 346,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0.5802316134941725,
              0.5465890737725877,
              0.5376905972559821,
              0.5163264209630279,
              0.522394202542052,
              0.4810546570301299,
              0.42894974479144754,
              0.4901227655091387,
              0.5315771791444284,
              0.5755417315341966,
              0.4320698594977393,
              0.47582396597650856,
              0.44091590255143825,
              0.4543320721251412,
              0.4941206228577532,
              0.5832572185018918,
              0.6428934856277289,
              0.5946676462877432,
              0.5553619689088986,
              0.5479704689558297
            ]
          },
          {
            "responseId": "45178",
            "metricId": 20,
            "metricName": "stimulusTimeStamp",
            "startIndex": 1,
            "endIndex": 20,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              0,
              74,
              105,
              312,
              457,
              696,
              736,
              950,
              1053,
              1087,
              1158,
              1204,
              1249,
              1286,
              1358,
              1414,
              1441,
              1534,
              1547,
              1615
            ]
          },
          {
            "responseId": "45178",
            "metricId": 21,
            "metricName": "absoluteTimeStamp",
            "startIndex": 1,
            "endIndex": 20,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              1439217335582,
              1439217335606,
              1439217335616,
              1439217335684,
              1439217335732,
              1439217335810,
              1439217335823,
              1439217335893,
              1439217335953,
              1439217335987,
              1439217336058,
              1439217336104,
              1439217336149,
              1439217336186,
              1439217336258,
              1439217336314,
              1439217336341,
              1439217336434,
              1439217336447,
              1439217336515
            ]
          },
          {
            "responseId": "45178",
            "metricId": 22,
            "metricName": "eventType",
            "startIndex": 1,
            "endIndex": 20,
            "stepSize": 1,
            "customMessage": "OK;",
            "data": [
              20,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              17,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ]
          }
        ]


### Delete timeseries [DELETE /v1/timeseries{?response_id,metric_id}]]
+ Parameters
    + response_id: 123 (required, integer) - Id of the Response associated to the Timeseries.
    + metric_id: 123 (optional, integer) - Id of the Metric of the Timeseries to be deleted.

+ Response 200 (text/plain)
